'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _isChildrenEqual = require('./isChildrenEqual');

var _isChildrenEqual2 = _interopRequireDefault(_isChildrenEqual);

var _zscroller = require('zscroller');

var _zscroller2 = _interopRequireDefault(_zscroller);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var Picker = React.createClass({
    displayName: 'Picker',
    getDefaultProps: function getDefaultProps() {
        return {
            prefixCls: 'rmc-picker',
            pure: true,
            onValueChange: function onValueChange() {}
        };
    },
    getInitialState: function getInitialState() {
        var selectedValueState = void 0;
        var _props = this.props;
        var selectedValue = _props.selectedValue;
        var defaultSelectedValue = _props.defaultSelectedValue;
        var children = _props.children;

        if (selectedValue !== undefined) {
            selectedValueState = selectedValue;
        } else if (defaultSelectedValue !== undefined) {
            selectedValueState = defaultSelectedValue;
        } else if (children.length) {
            selectedValueState = children[0].value;
        }
        return {
            selectedValue: selectedValueState
        };
    },
    componentDidMount: function componentDidMount() {
        this.itemHeight = this.refs.indicator.offsetHeight;
        // compact
        this.refs.content.style.padding = this.itemHeight * 3 + 'px 0';
        this.zscroller = new _zscroller2["default"](this.refs.content, {
            scrollingX: false,
            snapping: true,
            penetrationDeceleration: .1,
            minVelocityToKeepDecelerating: 0.5,
            scrollingComplete: this.scrollingComplete
        });
        this.zscroller.setDisabled(this.props.disabled);
        this.zscroller.scroller.setSnapSize(0, this.itemHeight);
        this.select(this.state.selectedValue);
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if ('selectedValue' in nextProps) {
            this.setState({
                selectedValue: nextProps.selectedValue
            });
        }
        this.zscroller.setDisabled(nextProps.disabled);
    },
    shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
        return this.state.selectedValue !== nextState.selectedValue || !(0, _isChildrenEqual2["default"])(this.props.children, nextProps.children, this.props.pure);
    },
    componentDidUpdate: function componentDidUpdate() {
        this.zscroller.reflow();
        this.select(this.state.selectedValue);
    },
    componentWillUnmount: function componentWillUnmount() {
        this.zscroller.destroy();
    },
    selectByIndex: function selectByIndex(index) {
        if (index < 0 || index >= this.props.children.length) {
            return;
        }
        this.zscroller.scroller.scrollTo(0, index * this.itemHeight);
    },
    select: function select(value) {
        var children = this.props.children;
        for (var i = 0, len = children.length; i < len; i++) {
            if (children[i].value === value) {
                this.selectByIndex(i);
                return;
            }
        }
        this.selectByIndex(0);
    },
    fireValueChange: function fireValueChange(selectedValue) {
        if (selectedValue !== this.state.selectedValue) {
            if (!('selectedValue' in this.props)) {
                this.setState({
                    selectedValue: selectedValue
                });
            }
            this.props.onValueChange(selectedValue);
        }
    },
    scrollingComplete: function scrollingComplete() {
        var _zscroller$scroller$g = this.zscroller.scroller.getValues();

        var top = _zscroller$scroller$g.top;

        var index = Math.round((top - this.itemHeight / 2) / this.itemHeight);
        var child = this.props.children[index];
        if (child) {
            this.fireValueChange(child.value);
        }
    },
    render: function render() {
        var _pickerCls;

        var _props2 = this.props;
        var children = _props2.children;
        var prefixCls = _props2.prefixCls;
        var className = _props2.className;
        var itemStyle = _props2.itemStyle;
        var selectedValue = this.state.selectedValue;

        var itemClassName = prefixCls + '-item';
        var selectedItemClassName = itemClassName + ' ' + prefixCls + '-item-selected';
        var items = children.map(function (item) {
            return React.createElement("div", { style: itemStyle, className: selectedValue === item.value ? selectedItemClassName : itemClassName, key: item.value }, item.label);
        });
        var pickerCls = (_pickerCls = {}, (0, _defineProperty3["default"])(_pickerCls, className, !!className), (0, _defineProperty3["default"])(_pickerCls, prefixCls, true), _pickerCls);
        return React.createElement("div", { className: (0, _classnames2["default"])(pickerCls) }, React.createElement("div", { className: prefixCls + '-mask' }), React.createElement("div", { className: prefixCls + '-indicator', ref: "indicator" }), React.createElement("div", { className: prefixCls + '-content', ref: "content" }, items));
    }
});
exports["default"] = Picker;
module.exports = exports['default'];