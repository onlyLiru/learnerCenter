'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _reactNative = require('react-native');

var _react = require('react');

var React = _interopRequireWildcard(_react);

var _PopupMixin = require('./PopupMixin');

var _PopupMixin2 = _interopRequireDefault(_PopupMixin);

var _Modal = require('rc-dialog/lib/Modal');

var _Modal2 = _interopRequireDefault(_Modal);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

var PopupPicker = React.createClass({
    displayName: 'PopupPicker',

    mixins: [_PopupMixin2["default"]],
    getDefaultProps: function getDefaultProps() {
        return {
            actionTextUnderlayColor: '#a9d9d4',
            actionTextActiveOpacity: 0.5,
            triggerType: 'onPress',
            styles: {},
            WrapComponent: _reactNative.View
        };
    },
    getModal: function getModal() {
        var props = this.props;
        var styles = props.styles;

        return React.createElement(_Modal2["default"], { wrapStyle: styles.modal, visible: this.state.visible, onClose: this.onDismiss }, React.createElement(_reactNative.View, { style: [styles.header] }, React.createElement(_reactNative.TouchableHighlight, { onPress: this.onDismiss, style: [styles.headerItem], activeOpacity: props.actionTextActiveOpacity, underlayColor: props.actionTextUnderlayColor }, React.createElement(_reactNative.Text, { style: [styles.actionText] }, props.dismissText)), React.createElement(_reactNative.View, { style: [styles.headerItem] }, React.createElement(_reactNative.Text, { style: [styles.title] }, props.title)), React.createElement(_reactNative.TouchableHighlight, { onPress: this.onOk, style: [styles.headerItem], activeOpacity: props.actionTextActiveOpacity, underlayColor: props.actionTextUnderlayColor }, React.createElement(_reactNative.Text, { style: [styles.actionText] }, props.okText))), props.content);
    },
    render: function render() {
        return this.getRender();
    }
});
exports["default"] = PopupPicker;
module.exports = exports['default'];